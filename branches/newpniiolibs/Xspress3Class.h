/*----- PROTECTED REGION ID(Xspress3Class.h) ENABLED START -----*/
//=============================================================================
//
// file :        Xspress3Class.h
//
// description : Include for the Xspress3 root class.
//               This class is the singleton class for
//                the Xspress3 device class.
//               It contains all properties and methods which the 
//               Xspress3 requires only once e.g. the commands.
//
// project :     Xspress3
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Xspress3Class_H
#define Xspress3Class_H

#include <tango.h>
#include <Xspress3.h>


/*----- PROTECTED REGION END -----*/	//	Xspress3Class.h


namespace Xspress3_ns
{
/*----- PROTECTED REGION ID(Xspress3Class::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	Xspress3Class::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute ExposureTime class definition
class ExposureTimeAttrib: public Tango::Attr
{
public:
	ExposureTimeAttrib():Attr("ExposureTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ExposureTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_ExposureTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Xspress3 *>(dev))->write_ExposureTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_ExposureTime_allowed(ty);}
};

//	Attribute NbFrames class definition
class NbFramesAttrib: public Tango::Attr
{
public:
	NbFramesAttrib():Attr("NbFrames",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~NbFramesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_NbFrames(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Xspress3 *>(dev))->write_NbFrames(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_NbFrames_allowed(ty);}
};

//	Attribute TriggerMode class definition
class TriggerModeAttrib: public Tango::Attr
{
public:
	TriggerModeAttrib():Attr("TriggerMode",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~TriggerModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_TriggerMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Xspress3 *>(dev))->write_TriggerMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_TriggerMode_allowed(ty);}
};

//	Attribute FileDir class definition
class FileDirAttrib: public Tango::Attr
{
public:
	FileDirAttrib():Attr("FileDir",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~FileDirAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_FileDir(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Xspress3 *>(dev))->write_FileDir(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_FileDir_allowed(ty);}
};

//	Attribute LastFrame class definition
class LastFrameAttrib: public Tango::Attr
{
public:
	LastFrameAttrib():Attr("LastFrame",
			Tango::DEV_LONG, Tango::READ) {};
	~LastFrameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_LastFrame(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_LastFrame_allowed(ty);}
};

//	Attribute FilePrefix class definition
class FilePrefixAttrib: public Tango::Attr
{
public:
	FilePrefixAttrib():Attr("FilePrefix",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~FilePrefixAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_FilePrefix(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Xspress3 *>(dev))->write_FilePrefix(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_FilePrefix_allowed(ty);}
};

//	Attribute MCALength class definition
class MCALengthAttrib: public Tango::Attr
{
public:
	MCALengthAttrib():Attr("MCALength",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~MCALengthAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_MCALength(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Xspress3 *>(dev))->write_MCALength(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_MCALength_allowed(ty);}
};

//	Attribute FramesPerFile class definition
class FramesPerFileAttrib: public Tango::Attr
{
public:
	FramesPerFileAttrib():Attr("FramesPerFile",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~FramesPerFileAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_FramesPerFile(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Xspress3 *>(dev))->write_FramesPerFile(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_FramesPerFile_allowed(ty);}
};

//	Attribute RunMode class definition
class RunModeAttrib: public Tango::SpectrumAttr
{
public:
	RunModeAttrib():SpectrumAttr("RunMode",
			Tango::DEV_LONG, Tango::READ_WRITE, 6) {};
	~RunModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_RunMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Xspress3 *>(dev))->write_RunMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_RunMode_allowed(ty);}
};

//	Attribute DataCh1 class definition
class DataCh1Attrib: public Tango::SpectrumAttr
{
public:
	DataCh1Attrib():SpectrumAttr("DataCh1",
			Tango::DEV_LONG, Tango::READ, 4096) {};
	~DataCh1Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_DataCh1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_DataCh1_allowed(ty);}
};

//	Attribute DataCh2 class definition
class DataCh2Attrib: public Tango::SpectrumAttr
{
public:
	DataCh2Attrib():SpectrumAttr("DataCh2",
			Tango::DEV_LONG, Tango::READ, 4096) {};
	~DataCh2Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_DataCh2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_DataCh2_allowed(ty);}
};

//	Attribute DataCh3 class definition
class DataCh3Attrib: public Tango::SpectrumAttr
{
public:
	DataCh3Attrib():SpectrumAttr("DataCh3",
			Tango::DEV_LONG, Tango::READ, 4096) {};
	~DataCh3Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_DataCh3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_DataCh3_allowed(ty);}
};

//	Attribute DataCh4 class definition
class DataCh4Attrib: public Tango::SpectrumAttr
{
public:
	DataCh4Attrib():SpectrumAttr("DataCh4",
			Tango::DEV_LONG, Tango::READ, 4096) {};
	~DataCh4Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Xspress3 *>(dev))->read_DataCh4(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Xspress3 *>(dev))->is_DataCh4_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command StartAcquisition class definition
class StartAcquisitionClass : public Tango::Command
{
public:
	StartAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartAcquisitionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Xspress3 *>(dev))->is_StartAcquisition_allowed(any);}
};

//	Command StopAcquisition class definition
class StopAcquisitionClass : public Tango::Command
{
public:
	StopAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopAcquisitionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Xspress3 *>(dev))->is_StopAcquisition_allowed(any);}
};


/**
 *	The Xspress3Class singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  Xspress3Class : public Tango::DeviceClass
#else
class Xspress3Class : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(Xspress3Class::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3Class::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static Xspress3Class *init(const char *);
		static Xspress3Class *instance();
		~Xspress3Class();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		Xspress3Class(string &);
		static Xspress3Class *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	Xspress3_H
