/*----- PROTECTED REGION ID(Xspress3.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Xspress3.cpp
//
// description : C++ source for the Xspress3 class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Xspress3 are implemented in this file.
//
// project :     Xspress3
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Xspress3.h>
#include <Xspress3Class.h>

#include <AcqThread.h>

/*----- PROTECTED REGION END -----*/	//	Xspress3.cpp

/**
 *  Xspress3 class description:
 *    Xspress3 detector server
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name      |  Method name
//================================================================
//  State             |  Inherited (no method)
//  Status            |  Inherited (no method)
//  StartAcquisition  |  start_acquisition
//  StopAcquisition   |  stop_acquisition
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  ExposureTime   |  Tango::DevDouble	Scalar
//  NbFrames       |  Tango::DevLong	Scalar
//  TriggerMode    |  Tango::DevLong	Scalar
//  FileDir        |  Tango::DevString	Scalar
//  LastFrame      |  Tango::DevLong	Scalar
//  FilePrefix     |  Tango::DevString	Scalar
//  MCALength      |  Tango::DevLong	Scalar
//  FramesPerFile  |  Tango::DevLong	Scalar
//  RunMode        |  Tango::DevLong	Spectrum  ( max = 6)
//================================================================

namespace Xspress3_ns
{
/*----- PROTECTED REGION ID(Xspress3::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Xspress3::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Xspress3::Xspress3()
 *	Description : Constructors for a Tango device
 *                implementing the classXspress3
 */
//--------------------------------------------------------
Xspress3::Xspress3(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Xspress3::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::constructor_1
}
//--------------------------------------------------------
Xspress3::Xspress3(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Xspress3::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::constructor_2
}
//--------------------------------------------------------
Xspress3::Xspress3(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Xspress3::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Xspress3::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Xspress3::delete_device()
{
	DEBUG_STREAM << "Xspress3::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Xspress3::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	if (xsp3_close(m_handle) < 0){
	  Tango::Except::throw_exception ((const char *)"Xspress3 error",
					  (const char *)xsp3_get_error_message(),
					  (const char *)"Xspress3::delete_device");
	}
	/*----- PROTECTED REGION END -----*/	//	Xspress3::delete_device
	delete[] attr_ExposureTime_read;
	delete[] attr_NbFrames_read;
	delete[] attr_TriggerMode_read;
	delete[] attr_FileDir_read;
	delete[] attr_LastFrame_read;
	delete[] attr_FilePrefix_read;
	delete[] attr_MCALength_read;
	delete[] attr_FramesPerFile_read;
	delete[] attr_RunMode_read;
}

//--------------------------------------------------------
/**
 *	Method      : Xspress3::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Xspress3::init_device()
{
	DEBUG_STREAM << "Xspress3::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Xspress3::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_ExposureTime_read = new Tango::DevDouble[1];
	attr_NbFrames_read = new Tango::DevLong[1];
	attr_TriggerMode_read = new Tango::DevLong[1];
	attr_FileDir_read = new Tango::DevString[1];
	attr_LastFrame_read = new Tango::DevLong[1];
	attr_FilePrefix_read = new Tango::DevString[1];
	attr_MCALength_read = new Tango::DevLong[1];
	attr_FramesPerFile_read = new Tango::DevLong[1];
	attr_RunMode_read = new Tango::DevLong[6];
	/*----- PROTECTED REGION ID(Xspress3::init_device) ENABLED START -----*/
	
	//	Initialize device


	*attr_FileDir_read = new char[200];
	*attr_LastFrame_read = 0;
	*attr_MCALength_read = 0;
	*attr_FramesPerFile_read = 0;

	flag_stop_acq = 0;

	if ((m_handle = xsp3_config(nbCards, maxFrames, (char*)baseIPAddress.c_str(), basePort, (char*)baseMACAddress.c_str(), nbChannels, createScopeModule, (char*)scopeModuleName.c_str(), debug, cardIndex)) < 0) {
	  Tango::Except::throw_exception ((const char *)"Xspress3 error",
					  (const char *)xsp3_get_error_message(),
					  (const char *)"Xspress3::init_device");
	}
	
	/*   Initialise the regions of interest. Removes any existing regions of interest.
	 *
	 *    Second argument is the number of the channel in the xspress3 system,
	 *    if chan is less than 0 then all channels are selected
	 */
	
	if (xsp3_init_roi(m_handle, -1) < 0) {
	  Tango::Except::throw_exception ((const char *)"Xspress3 error",
					  (const char *)xsp3_get_error_message(),
					  (const char *)"Xspress3::init_device");
	}
	
	Tango::DevLong gen;
	// Card 0 is the  master clock
	m_card = 0;
	gen = xsp3_get_generation(m_handle, m_card);
	if (xsp3_clocks_setup(m_handle, m_card, gen == 2 ? Xspress3::ClockSrc::Mini : Xspress3::ClockSrc::XtalClk, Xspress3::ClockFlags::Master | Xspress3::ClockFlags::NoDither, 0) < 0) {
	  Tango::Except::throw_exception ((const char *)"Xspress3 error",
					  (const char *)xsp3_get_error_message(),
					  (const char *)"Xspress3::init_device");
	}
	
	for (Tango::DevLong i=1; i<nbCards; i++) {
	  m_card = i;
	  if (xsp3_clocks_setup(m_handle,  m_card, Xspress3::ClockSrc::ExtClk,Xspress3::ClockFlags::NoDither, 0) < 0) {
	    Tango::Except::throw_exception ((const char *)"Xspress3 error",
					    (const char *)xsp3_get_error_message(),
					    (const char *)"Xspress3::init_device");
	  }
	}

	Tango::DevLong force_mismatch = 1;
	
	if(strcmp(configFileDirectory.c_str(), "") && strcmp(configFileDirectory.c_str(), "None")){
	  if (xsp3_restore_settings(m_handle, (char*) configFileDirectory.c_str(), force_mismatch) < 0) {
	    Tango::Except::throw_exception ((const char *)"Xspress3 error",
					    (const char *)xsp3_get_error_message(),
					    (const char *)"Xspress3::init_device");
	  }
	}


	Tango::DevLong flags = 0;

	/**
	 * Set the run mode flags
	 *
	 *  scalers, hist, playback, scope
	 */
	if (false)
	  flags |= XSP3_RUN_FLAGS_PLAYBACK;
	if (false)
	  flags |= XSP3_RUN_FLAGS_SCOPE;
	if (true)
	  flags |= XSP3_RUN_FLAGS_SCALERS;
	if (true)
	  flags |= XSP3_RUN_FLAGS_HIST;

	if (xsp3_set_run_flags(m_handle, flags) < 0) {
	    Tango::Except::throw_exception ((const char *)"Xspress3 error",
					    (const char *)xsp3_get_error_message(),
					    (const char *)"Xspress3::init_device");
	}

	set_state(Tango::ON);
       	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Xspress3::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Xspress3::get_device_property()
{
	/*----- PROTECTED REGION ID(Xspress3::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("NbCards"));
	dev_prop.push_back(Tango::DbDatum("MaxFrames"));
	dev_prop.push_back(Tango::DbDatum("BaseIPAddress"));
	dev_prop.push_back(Tango::DbDatum("BasePort"));
	dev_prop.push_back(Tango::DbDatum("BaseMACAddress"));
	dev_prop.push_back(Tango::DbDatum("NbChannels"));
	dev_prop.push_back(Tango::DbDatum("CreateScopeModule"));
	dev_prop.push_back(Tango::DbDatum("ScopeModuleName"));
	dev_prop.push_back(Tango::DbDatum("Debug"));
	dev_prop.push_back(Tango::DbDatum("CardIndex"));
	dev_prop.push_back(Tango::DbDatum("ConfigFileDirectory"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on Xspress3Class to get class property
		Tango::DbDatum	def_prop, cl_prop;
		Xspress3Class	*ds_class =
			(static_cast<Xspress3Class *>(get_device_class()));
		int	i = -1;

		//	Try to initialize NbCards from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  nbCards;
		else {
			//	Try to initialize NbCards from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  nbCards;
		}
		//	And try to extract NbCards value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  nbCards;

		//	Try to initialize MaxFrames from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  maxFrames;
		else {
			//	Try to initialize MaxFrames from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  maxFrames;
		}
		//	And try to extract MaxFrames value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  maxFrames;

		//	Try to initialize BaseIPAddress from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  baseIPAddress;
		else {
			//	Try to initialize BaseIPAddress from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  baseIPAddress;
		}
		//	And try to extract BaseIPAddress value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  baseIPAddress;

		//	Try to initialize BasePort from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  basePort;
		else {
			//	Try to initialize BasePort from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  basePort;
		}
		//	And try to extract BasePort value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  basePort;

		//	Try to initialize BaseMACAddress from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  baseMACAddress;
		else {
			//	Try to initialize BaseMACAddress from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  baseMACAddress;
		}
		//	And try to extract BaseMACAddress value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  baseMACAddress;

		//	Try to initialize NbChannels from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  nbChannels;
		else {
			//	Try to initialize NbChannels from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  nbChannels;
		}
		//	And try to extract NbChannels value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  nbChannels;

		//	Try to initialize CreateScopeModule from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  createScopeModule;
		else {
			//	Try to initialize CreateScopeModule from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  createScopeModule;
		}
		//	And try to extract CreateScopeModule value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  createScopeModule;

		//	Try to initialize ScopeModuleName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  scopeModuleName;
		else {
			//	Try to initialize ScopeModuleName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  scopeModuleName;
		}
		//	And try to extract ScopeModuleName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  scopeModuleName;

		//	Try to initialize Debug from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  debug;
		else {
			//	Try to initialize Debug from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  debug;
		}
		//	And try to extract Debug value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  debug;

		//	Try to initialize CardIndex from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  cardIndex;
		else {
			//	Try to initialize CardIndex from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  cardIndex;
		}
		//	And try to extract CardIndex value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cardIndex;

		//	Try to initialize ConfigFileDirectory from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  configFileDirectory;
		else {
			//	Try to initialize ConfigFileDirectory from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  configFileDirectory;
		}
		//	And try to extract ConfigFileDirectory value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configFileDirectory;

	}

	/*----- PROTECTED REGION ID(Xspress3::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Xspress3::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Xspress3::always_executed_hook()
{
	DEBUG_STREAM << "Xspress3::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Xspress3::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Xspress3::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Xspress3::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Xspress3::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Xspress3::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Xspress3::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Xspress3::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute ExposureTime related method
 *	Description: Exposure time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::read_ExposureTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_ExposureTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_ExposureTime) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ExposureTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_ExposureTime
}
//--------------------------------------------------------
/**
 *	Write attribute ExposureTime related method
 *	Description: Exposure time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::write_ExposureTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Xspress3::write_ExposureTime(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Xspress3::write_ExposureTime) ENABLED START -----*/

	*attr_ExposureTime_read = w_val;
	setTimingMode();
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_ExposureTime
}
//--------------------------------------------------------
/**
 *	Read attribute NbFrames related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::read_NbFrames(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_NbFrames(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_NbFrames) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_NbFrames_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_NbFrames
}
//--------------------------------------------------------
/**
 *	Write attribute NbFrames related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::write_NbFrames(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Xspress3::write_NbFrames(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Xspress3::write_NbFrames) ENABLED START -----*/

	*attr_NbFrames_read = w_val;
	setTimingMode();
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_NbFrames
}
//--------------------------------------------------------
/**
 *	Read attribute TriggerMode related method
 *	Description: 0 -> internal trigger, 1 -> external gate
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::read_TriggerMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_TriggerMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_TriggerMode) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_TriggerMode_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_TriggerMode
}
//--------------------------------------------------------
/**
 *	Write attribute TriggerMode related method
 *	Description: 0 -> internal trigger, 1 -> external gate
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::write_TriggerMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Xspress3::write_TriggerMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Xspress3::write_TriggerMode) ENABLED START -----*/

	*attr_TriggerMode_read = w_val;
	setTimingMode();
	
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_TriggerMode
}
//--------------------------------------------------------
/**
 *	Read attribute FileDir related method
 *	Description: Path to the dector image files.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::read_FileDir(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_FileDir(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_FileDir) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FileDir_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_FileDir
}
//--------------------------------------------------------
/**
 *	Write attribute FileDir related method
 *	Description: Path to the dector image files.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::write_FileDir(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Xspress3::write_FileDir(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Xspress3::write_FileDir) ENABLED START -----*/
	
	attr.get_write_value( *attr_FileDir_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_FileDir
}
//--------------------------------------------------------
/**
 *	Read attribute LastFrame related method
 *	Description: Last acquired frame
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::read_LastFrame(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_LastFrame(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_LastFrame) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_LastFrame_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_LastFrame
}
//--------------------------------------------------------
/**
 *	Read attribute FilePrefix related method
 *	Description: Name of the file to store the data. The end .nxs will be automatically added.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::read_FilePrefix(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_FilePrefix(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_FilePrefix) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FilePrefix_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_FilePrefix
}
//--------------------------------------------------------
/**
 *	Write attribute FilePrefix related method
 *	Description: Name of the file to store the data. The end .nxs will be automatically added.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::write_FilePrefix(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Xspress3::write_FilePrefix(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Xspress3::write_FilePrefix) ENABLED START -----*/
	
	*attr_FilePrefix_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_FilePrefix
}
//--------------------------------------------------------
/**
 *	Read attribute MCALength related method
 *	Description: Length of the MCA data to store. If 0 the maximum mca length will be saved.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::read_MCALength(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_MCALength(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_MCALength) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_MCALength_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_MCALength
}
//--------------------------------------------------------
/**
 *	Write attribute MCALength related method
 *	Description: Length of the MCA data to store. If 0 the maximum mca length will be saved.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::write_MCALength(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Xspress3::write_MCALength(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Xspress3::write_MCALength) ENABLED START -----*/

	*attr_MCALength_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_MCALength
}
//--------------------------------------------------------
/**
 *	Read attribute FramesPerFile related method
 *	Description: Number of frames to save in each file. If 0 all frames will be in the same file.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::read_FramesPerFile(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_FramesPerFile(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_FramesPerFile) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FramesPerFile_read);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_FramesPerFile
}
//--------------------------------------------------------
/**
 *	Write attribute FramesPerFile related method
 *	Description: Number of frames to save in each file. If 0 all frames will be in the same file.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Xspress3::write_FramesPerFile(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Xspress3::write_FramesPerFile(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Xspress3::write_FramesPerFile) ENABLED START -----*/
	*attr_FramesPerFile_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_FramesPerFile
}
//--------------------------------------------------------
/**
 *	Read attribute RunMode related method
 *	Description: RunMode: playback, scope, scalers, hist, diag_hist, circular_buffer
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 6
 */
//--------------------------------------------------------
void Xspress3::read_RunMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Xspress3::read_RunMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Xspress3::read_RunMode) ENABLED START -----*/

	int flags;
	if ((flags = xsp3_get_run_flags(m_handle)) < 0) {
	  Tango::Except::throw_exception ((const char *)"Xspress3 error",
					  (const char *)xsp3_get_error_message(),
					  (const char *)"Xspress3::read_RunMode");
	}
	
	attr_RunMode_read[0] = flags & XSP3_RUN_FLAGS_PLAYBACK;
	attr_RunMode_read[1] = (flags & XSP3_RUN_FLAGS_SCOPE) >> 1;
	attr_RunMode_read[2] = (flags & XSP3_RUN_FLAGS_SCALERS) >> 2; 
	attr_RunMode_read[3] = (flags & XSP3_RUN_FLAGS_HIST) >> 3;
	attr_RunMode_read[4] = (flags & XSP3_RUN_FLAGS_DIAG_HIST) >> 4;
	attr_RunMode_read[5] = (flags & XSP3_RUN_FLAGS_CIRCULAR_BUFFER) >> 8;
	
	
	//	Set the attribute value
	attr.set_value(attr_RunMode_read, 6);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::read_RunMode
}
//--------------------------------------------------------
/**
 *	Write attribute RunMode related method
 *	Description: RunMode: playback, scope, scalers, hist, diag_hist, circular_buffer
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 6
 */
//--------------------------------------------------------
void Xspress3::write_RunMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Xspress3::write_RunMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevLong	*w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Xspress3::write_RunMode) ENABLED START -----*/

	Tango::DevLong flags = 0;
	
	if (w_val[0])
	  flags |= XSP3_RUN_FLAGS_PLAYBACK;
	if (w_val[1])
	  flags |= XSP3_RUN_FLAGS_SCOPE;
	if (w_val[2])
	  flags |= XSP3_RUN_FLAGS_SCALERS;
	if (w_val[3])
	  flags |= XSP3_RUN_FLAGS_HIST;
	if (w_val[4])
	  flags |= XSP3_RUN_FLAGS_DIAG_HIST;
	if (w_val[5])
	  flags |= XSP3_RUN_FLAGS_CIRCULAR_BUFFER;
	if (xsp3_set_run_flags(m_handle, flags) < 0) {
	    Tango::Except::throw_exception ((const char *)"Xspress3 error",
					    (const char *)xsp3_get_error_message(),
					    (const char *)"Xspress3::write_RunMode");
	}
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::write_RunMode
}

//--------------------------------------------------------
/**
 *	Method      : Xspress3::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Xspress3::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Xspress3::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command StartAcquisition related method
 *	Description: Start Acquisition
 *
 */
//--------------------------------------------------------
void Xspress3::start_acquisition()
{
	DEBUG_STREAM << "Xspress3::StartAcquisition()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Xspress3::start_acquisition) ENABLED START -----*/
	
	//	Add your own code

	
	if(get_state() == Tango::MOVING){
	  Tango::Except::throw_exception ((const char *)"Xspress3 error",
					  (const char *)"Device in MOVING state. StartAcquistion not allowed",
					  (const char *)"Xspress3::start_acquisition");
	}

	set_state(Tango::MOVING);
	
	// Start thread
	if (acq_thread){ 
	  void *ptr;
	  acq_thread->join( &ptr);
	  acq_thread = 0;
	}
	  
	acq_thread = new AcqThread(this, mutex);
	
	/*----- PROTECTED REGION END -----*/	//	Xspress3::start_acquisition
}
//--------------------------------------------------------
/**
 *	Command StopAcquisition related method
 *	Description: Stop acquisition
 *
 */
//--------------------------------------------------------
void Xspress3::stop_acquisition()
{
	DEBUG_STREAM << "Xspress3::StopAcquisition()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Xspress3::stop_acquisition) ENABLED START -----*/
	
	//	Add your own code

	Tango::DevLong busy = 1;
	Tango::DevLong notbusy_counts = 0;
	
	xsp3_histogram_stop(m_handle, cardIndex);
	
	if(*attr_TriggerMode_read == 1){ // Not needed but keep it for safety
	  while(busy == 1){
	    busy = xsp3_histogram_is_any_busy(m_handle);
	    if(busy == 0){
	      notbusy_counts = notbusy_counts + 1;
	    } else {
	      notbusy_counts = 0;
	    }
	    if(notbusy_counts < 2){
	      busy = 1;
	    }
	    usleep(10000);
	  }
	}
	
	
	flag_stop_acq = 1;

	/*----- PROTECTED REGION END -----*/	//	Xspress3::stop_acquisition
}

/*----- PROTECTED REGION ID(Xspress3::namespace_ending) ENABLED START -----*/

//	Additional Methods

/**
 * Setup Time Framing source
 *
 * @param[in] time_src 0 = default software
 *                     1 = Use TTL input 1 as Veto (default is software controlled Veto)
 *                     2 = Use TTL inputs 0 and 1 as Frame Zero and Veto respectively
 *                     3 = Use 4 Pin LVDS input for veto only
 *                     4 = Use 4 Pin LVDS input for Veto and Frame 0
 * @param[in] first_frame Specify first time frame (default 0)
 * @param[in] alt_ttl_mode 0 = default timing mode
 *                         1 = TTL 0..3 output in-window0 for channels 0..3 respectively
                           2 = TTL 0..3 output in-win0(0), in-win0(1), live-level(0) and live-level(1) respectively. Count live when high
                           3 = TTL 0..3 output in-win0(0), in-win0(1), live-toggle(0) and live-toggle(1) respectively. Count live (rising edges)
                           4 = TTL 0..3 output in-win0, all-event, all-good and live-level from channel 0
                           5 = TTL 0..3 output in-win0, all-event, all-good and live-toggle from channel 0
 * @param[in] debounce Set debounce time in 80 MHz cycles to ignore glitches and ringing on Frame 0 and Framing signals
 * @param[in] loop_io Loop TTL In 0..3 to TTL OUt 0..3 for hardware testing
 * @param[in] f0_invert Invert Frame 0 input
 * @param[in] veto_invert Invert Veto input
 */
  
void Xspress3::setTiming(int time_src, int first_frame, int alt_ttl_mode, int debounce, bool loop_io, bool f0_invert, bool veto_invert) {
    int t_src=0;
    u_int32_t time_fixed=0;
    u_int32_t time_a=0;
    int debounce_val;
    int alt_ttl;

    switch (time_src)
    {
    case 0:
        t_src = XSP3_GTIMA_SRC_SOFTWARE;
        break;
    case 1:
        t_src = XSP3_GTIMA_SRC_INTERNAL;
        break;
    case 3:
        t_src = XSP3_GTIMA_SRC_IDC;
        break;
    case 4:
        t_src = XSP3_GTIMA_SRC_TTL_VETO_ONLY;
        break;
    case 5:
        t_src = XSP3_GTIMA_SRC_TTL_BOTH;
        break;
    case 6:
        t_src = XSP3_GTIMA_SRC_LVDS_VETO_ONLY;
        break;
    case 7:
        t_src = XSP3_GTIMA_SRC_LVDS_BOTH;
        break;
    default:
      Tango::Except::throw_exception ((const char *)"Xspress3 error",
				      (const char *)"Invalid time frame source",
				      (const char *)"Xspress3::setTiming");
    }
    time_a = XSP3_GLOB_TIMA_TF_SRC(t_src);

    if (f0_invert)
        time_a |= XSP3_GLOB_TIMA_F0_INV;

    if (veto_invert)
        time_a |= XSP3_GLOB_TIMA_VETO_INV;

    if (debounce > 255) {
      Tango::Except::throw_exception ((const char *)"Xspress3 error",
				      (const char *)"debounce value, should be less 255",
				      (const char *)"Xspress3::setTiming");
    }
    /* Default debounce = 80 cycles, 1 us */
    debounce_val = (debounce < 0) ? 80 : debounce;
    time_a |= XSP3_GLOB_TIMA_DEBOUNCE(debounce_val);

    if (loop_io)
        time_a |= XSP3_GLOB_TIMA_LOOP_IO;

    switch (alt_ttl_mode) {
        case       0 : alt_ttl = XSP3_ALT_TTL_TIMING_VETO; break;
        case 0x00400 : alt_ttl = XSP3_ALT_TTL_TIMING_ALL; break;
        case 0x00800 : alt_ttl = XSP3_ALT_TTL_INWINDOW; break;
        case 0x01000 : alt_ttl = XSP3_ALT_TTL_INWINLIVE; break;
        case 0x02000 : alt_ttl = XSP3_ALT_TTL_INWINLIVETOGGLE; break;
        case 0x04000 : alt_ttl = XSP3_ALT_TTL_INWINGOODLIVE; break;
        case 0x08000 : alt_ttl = XSP3_ALT_TTL_INWINGOODLIVETOGGLE; break;
        case 0x10000 : alt_ttl = XSP3_ALT_TTL_TIMING_VETO_GR; break;
        case 0x20000 : alt_ttl = XSP3_ALT_TTL_TIMING_ALL_GR; break;
        default:
	  Tango::Except::throw_exception ((const char *)"Xspress3 error",
					  (const char *)"Invalid alternate ttl mode for TTL Out",
					  (const char *)"Xspress3::setTiming");
    }
    time_a |= XSP3_GLOB_TIMA_ALT_TTL(alt_ttl);

    time_fixed = (first_frame < 0) ? 0 : first_frame;

    if (xsp3_set_glob_timeA(m_handle, m_card, time_a) < 0) {
	  Tango::Except::throw_exception ((const char *)"Xspress3 error",
					  (const char *)xsp3_get_error_message(),
					  (const char *)"Xspress3::setTiming");
    }
    if (xsp3_set_glob_timeFixed(m_handle, m_card, time_fixed) < 0) {
      Tango::Except::throw_exception ((const char *)"Xspress3 error",
				      (const char *)xsp3_get_error_message(),
				      (const char *)"Xspress3::setTiming");
    }
}


void Xspress3::setTimingMode() {
    
  if (!(*attr_ExposureTime_read)) return;
  if (!(*attr_NbFrames_read)) return;


  int alt_ttl_mode = 0;
  int debounce = 80;
  
  if (*attr_TriggerMode_read == IntTrig) {
    // Src 1 = Internal
    // setTiming(int time_src, int first_frame, int alt_ttl_mode, int debounce, bool loop_io, bool f0_invert, bool veto_invert);
    setTiming(1, 0, alt_ttl_mode, debounce, false, false, false);
    
    // setItfgTiming(int nframes, int triggerMode, int gapMode);
    // triggerMode 0 = Burst, gapMode 3 = 1us
    setItfgTiming((*attr_NbFrames_read), 0, 3);
    
  } else if ( *attr_TriggerMode_read == ExtGate) {
    // Src 4 = Ext
    setTiming(4, 0, alt_ttl_mode, debounce, false, false, false);
  }
}
void Xspress3::setItfgTiming(int nframes, int triggerMode, int gapMode) {
    int trig_mode;
    u_int32_t itime;
    int gap_mode;

    if ((*attr_ExposureTime_read) <= 0.0) {
      Tango::Except::throw_exception ((const char *)"Xspress3 error",
				      (const char *)"Exposure time has not been set",
				      (const char *)"Xspress3::setItfgTiming");
    }
    switch (triggerMode) {
    case Burst:
      trig_mode = XSP3_ITFG_TRIG_MODE_BURST;
      break;
    case SoftwarePause:
      trig_mode = XSP3_ITFG_TRIG_MODE_SOFTWARE;
      break;
    case HardwarePause:
      trig_mode = XSP3_ITFG_TRIG_MODE_HARDWARE;
      break;
    case SoftwareOnlyFirst:
      trig_mode = XSP3_ITFG_TRIG_MODE_SOFTWARE_ONLY_FIRST;
      break;
    case HardwareOnlyFirst:
      trig_mode = XSP3_ITFG_TRIG_MODE_HARDWARE_ONLY_FIRST;
      break;
    default:
      Tango::Except::throw_exception ((const char *)"Xspress3 error",
				      (const char *)"Invalid trigger mode qualifiers",
				      (const char *)"Xspress3::setTiming");
    }

    if ((*attr_ExposureTime_read) > 12.5E-9*2.0*0x7FFFFFFF) {
      Tango::Except::throw_exception ((const char *)"Xspress3 error",
				      (const char *)"Exposure time too long, must be <= 12.5E-9*2.0*0x7FFFFFFF",
				      (const char *)"Xspress3::setItfgTTiming");
    }
    itime = (u_int32_t)((*attr_ExposureTime_read)/12.5E-9);
    if (itime < 2) {
      Tango::Except::throw_exception ((const char *)"Xspress3 error",
				      (const char *)"Minimum exposure time = 25 ns",
				      (const char *)"Xspress3::setItfgTTiming");
    }
    switch (gapMode) {
        case Gap25ns:
            gap_mode = XSP3_ITFG_GAP_MODE_25NS;
            break;
        case Gap200ns:
            gap_mode = XSP3_ITFG_GAP_MODE_200NS;
            break;
        case Gap500ns:
            gap_mode = XSP3_ITFG_GAP_MODE_500NS;
            break;
        case Gap1us:
        default:
            gap_mode = XSP3_ITFG_GAP_MODE_1US;
            break;
    }
    // use cardNos = 0 even in multi card systems for synchronisation
    if (xsp3_itfg_setup(m_handle, 0, nframes, itime, trig_mode, gap_mode) < 0) {
      Tango::Except::throw_exception ((const char *)"Xspress3 error",
				      (const char *)xsp3_get_error_message(),
				      (const char *)"Xspress3::write_RunMode");
    }
}


   
/*----- PROTECTED REGION END -----*/	//	Xspress3::namespace_ending
} //	namespace
