static const char *RcsId = "$Header: /cvsroot/tango-ds/training/Metamotor/AcqThread.cpp,v 1.1.1.1 2007/10/04 14:20:47 jensmeyer Exp $";
//+=============================================================================
//
// file :        AcqThread.cpp
//
// description : C++ source for the AcqThread. 
//
// project :     TANGO Device Server
//
//-=============================================================================

#include <AcqThread.h>
#include <math.h>
#include <time.h>
#include "haslib.h"

namespace Xspress3_ns
{
 
  void AcqThread::append_field(pni::io::nx::h5::nxfield &field,pni::core::float32 value)
  {
    field.grow(0);
    field(field.size()-1).write(value);
  }
  
  AcqThread::AcqThread (Xspress3 *xspress3_obj, omni_mutex &m) : 
	Tango::LogAdapter(xspress3_obj), omni_thread(), mutex(m)
  {
    
    xspress3 = xspress3_obj;
    
    INFO_STREAM << "AcqThread::AcqThread() \n";
    start_undetached();
  }
  
  //+------------------------------------------------------------------
  /**
   *	method:	run_undetached()
   *
   *	description:	
   *
   */
  //+------------------------------------------------------------------
  void *AcqThread::run_undetached(void*)
  {

    // Clear memory
    xsp3_histogram_clear(xspress3->m_handle, 0, xspress3->nbChannels, 0, *(xspress3->attr_NbFrames_read));

    // Initialize number of frames acquired and read out

    Tango::DevLong m_read_frame_nb = 0; // Number of frames read into buffer
    int use_dtc = 0;
    
    double *pMCA = NULL;
    u_int32_t *pMCA_RAW = NULL;
    u_int32_t *pRAW = NULL;
    u_int32_t *scalar, *mca;
    int xsp3_status = 0;
    unsigned int num_frames_to_read = 0;
    unsigned int last_num_frames = 0;
    
    unsigned int frame = 0;
    int running, counting, paused, finished=0;

    Tango::DevLong frames_in_file = 0;
    Tango::DevLong mca_length;
    
    char filename[200];
    sprintf(filename,"%s/%s.nxs", *(xspress3->attr_FileDir_read), *(xspress3->attr_FilePrefix_read));

    if(*(xspress3->attr_MCALength_read) > 0){
      mca_length = *(xspress3->attr_MCALength_read);
    } else {
      mca_length = XSP3_MAXSPECTRA;
    }

      
    // Check if file already exists
    
    ifstream f(filename);
    if(f.good()){
      sprintf(filename,"%s/%s_%d.nxs", *(xspress3->attr_FileDir_read), *(xspress3->attr_FilePrefix_read), int(time(NULL)));
    }
    	
    // Open file to store data

    
    m_nxFile = pni::io::nx::h5::nxfile::create_file(filename, true); // true -> overwrite
    
    m_nxRootGroup = m_nxFile.root();
    
    
    m_nxGroup = m_nxRootGroup.create_group("/entry","NXentry");
    m_nxGroup = m_nxGroup.create_group("/entry/instrument","NXData");
    m_nxGroup = m_nxGroup.create_group("/entry/instrument/xspress3","NXData");
    
    m_nxGroupCh00 = m_nxGroup.create_group("/entry/instrument/xspress3/channel00","NXData");
    m_nxGroupCh01 = m_nxGroup.create_group("/entry/instrument/xspress3/channel01","NXData");
    m_nxGroupCh02 = m_nxGroup.create_group("/entry/instrument/xspress3/channel02","NXData");
    m_nxGroupCh03 = m_nxGroup.create_group("/entry/instrument/xspress3/channel03","NXData");

    m_nxGroup_scaler[0] = m_nxGroupCh00.create_group("/entry/instrument/xspress3/channel00/scaler","NXData");
    m_nxGroup_scaler[1] = m_nxGroupCh01.create_group("/entry/instrument/xspress3/channel01/scaler","NXData");
    m_nxGroup_scaler[2] = m_nxGroupCh02.create_group("/entry/instrument/xspress3/channel02/scaler","NXData");
    m_nxGroup_scaler[3] = m_nxGroupCh03.create_group("/entry/instrument/xspress3/channel03/scaler","NXData");

    pni::core::shape_t shape{0};
    pni::core::shape_t chunk{1024};
    pni::core::shape_t shape_hist{0, mca_length};

    m_nxField_histogram[0] = m_nxGroupCh00.create_field<pni::core::int32>("histogram"  ,shape_hist);
    m_nxField_histogram[1] = m_nxGroupCh01.create_field<pni::core::int32>("histogram"  ,shape_hist);
    m_nxField_histogram[2] = m_nxGroupCh02.create_field<pni::core::int32>("histogram"  ,shape_hist);
    m_nxField_histogram[3] = m_nxGroupCh03.create_field<pni::core::int32>("histogram"  ,shape_hist);

    for(int i = 0; i < 4; i ++){
      m_nxField_allEvent[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("allEvent"  ,shape,chunk);
      m_nxField_allGood[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("allGood"  ,shape,chunk);
      m_nxField_inWindow0[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("inWindow0"  ,shape,chunk);
      m_nxField_inWindow1[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("inWindow1"  ,shape,chunk);
      m_nxField_pileup[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("pileup"  ,shape,chunk);
      m_nxField_resetCounts[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("resetCounts"  ,shape,chunk);
      m_nxField_resetTicks[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("resetTicks"  ,shape,chunk);
      m_nxField_time[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("time"  ,shape,chunk);
      m_nxField_totalTicks[i] = m_nxGroup_scaler[i].create_field<pni::core::float32>("totalTicks"  ,shape,chunk);
    }
    
       
    pMCA = (double*)(calloc(XSP3_MAXFRAMES*xspress3->nbChannels*mca_length, sizeof(double)));
    pMCA_RAW = (u_int32_t*)(calloc(XSP3_MAXFRAMES*xspress3->nbChannels*mca_length, sizeof(u_int32_t)));    
    pRAW = (u_int32_t*)(calloc(XSP3_SW_NUM_SCALERS*mca_length*xspress3->nbChannels, sizeof(u_int32_t)));
    
    xsp3_histogram_start(xspress3->m_handle, xspress3->m_card);

    *(xspress3->attr_LastFrame_read) = 0;
      
    while( *(xspress3->attr_LastFrame_read) < *(xspress3->attr_NbFrames_read) && (xspress3->flag_stop_acq == 0)){
      
      
      u_int32_t tstat;
      if ((xsp3_status = xsp3_get_glob_time_statA(xspress3->m_handle, 0, &tstat)) < 0){
	printf("ERROR: Cannot read timing status: %s\n", xsp3_get_error_message());
      }
      
      frame = XSP3_GLOB_TSTAT_A_FRAME(tstat);
      running = XSP3_GLOB_TSTAT_A_ITFG_RUNNING(tstat);
      counting = XSP3_GLOB_TSTAT_A_ITFG_COUNTING(tstat);
      paused = XSP3_GLOB_TSTAT_A_ITFG_PAUSED(tstat);
      finished = XSP3_GLOB_TSTAT_A_ITFG_FINISHED(tstat);
      
      Xsp3ErrFlag error_flags;
      int64_t cur_frame;
      
      cur_frame = xsp3_scaler_check_progress_details(xspress3->m_handle, &error_flags, 1, NULL);

      num_frames_to_read = cur_frame - last_num_frames;
      	
      *(xspress3->attr_LastFrame_read) = cur_frame;
      
      if(num_frames_to_read > 0){

	
	xsp3_status = xsp3_scaler_read(xspress3->m_handle, pRAW, 0, 0, last_num_frames, XSP3_SW_NUM_SCALERS, xspress3->nbChannels, num_frames_to_read);
	if (use_dtc){
	  xsp3_status = xsp3_hist_dtc_read4d(xspress3->m_handle, pMCA, NULL, 0, 0, 0, last_num_frames, mca_length, 1, xspress3->nbChannels, num_frames_to_read);
	} else {
	  xsp3_status = xsp3_histogram_read4d(xspress3->m_handle, pMCA_RAW, 0, 0, 0, last_num_frames, mca_length, 1, xspress3->nbChannels, num_frames_to_read);
	}
	xsp3_histogram_circ_ack(xspress3->m_handle, 0, last_num_frames - 1,  xspress3->nbChannels, num_frames_to_read);
	int first_to_process = 0;
	scalar = pRAW+first_to_process*xspress3->nbChannels*XSP3_SW_NUM_SCALERS;
	for(int iframe = 0; iframe < num_frames_to_read; iframe ++){
	  for (int ichan=0;ichan<xspress3->nbChannels; ichan++){
	    if(use_dtc){
	      mca = (u_int32_t *)pMCA + mca_length*xspress3->nbChannels*iframe + ichan*mca_length; // It should not be cast if we want to use it
	    } else { 
	      mca = pMCA_RAW + mca_length*xspress3->nbChannels*iframe + ichan*mca_length;
	    }
	    u_int32_t total;
	    total = 0;
	    for (int eng=0; eng<mca_length; eng++)
	      total += mca[eng];


	    pni::core::slice mca_to_slice(0, mca_length);
	    m_nxField_histogram[ichan].grow(0,1);
	    m_nxField_histogram[ichan](frames_in_file,mca_to_slice).write(mca_length, mca);
	   
	    append_field(m_nxField_allEvent[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_ALL_EVENT]);
	    append_field(m_nxField_allGood[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_ALL_GOOD]);
	    append_field(m_nxField_inWindow0[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_IN_WINDOW0]);
	    append_field(m_nxField_inWindow1[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_IN_WINDOW1]);
	    append_field(m_nxField_pileup[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_PILEUP]);
	    append_field(m_nxField_resetCounts[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_NUM_RESETS]);
	    append_field(m_nxField_resetTicks[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_RESET_TICKS]);
	    append_field(m_nxField_time[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_LIVE_TICKS]);
	    append_field(m_nxField_totalTicks[ichan],(signed long)scalar[ichan*XSP3_SW_NUM_SCALERS+XSP_SW_SCALER_TOTAL_TICKS]);
	  }
	  frames_in_file = frames_in_file + 1;
	}
	
	m_nxFile.flush();
      }
      last_num_frames = *(xspress3->attr_LastFrame_read);
      
    }

    
    // Close *.nxs datafile

    m_nxFile.close();
    
    xspress3->set_state(Tango::ON);
    
    xspress3->flag_stop_acq = 0;
    
    return NULL;
  }
  
} // namespace Xspress3_ns
