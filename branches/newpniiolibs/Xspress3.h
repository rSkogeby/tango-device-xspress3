/*----- PROTECTED REGION ID(Xspress3.h) ENABLED START -----*/
//=============================================================================
//
// file :        Xspress3.h
//
// description : Include file for the Xspress3 class
//
// project :     Xspress3
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Xspress3_H
#define Xspress3_H

#include <tango.h>
#include "xspress3.h"

#define XSP3_MAXFRAMES 16384
#define XSP3_MAXSPECTRA 4096

/*----- PROTECTED REGION END -----*/	//	Xspress3.h

/**
 *  Xspress3 class description:
 *    Xspress3 detector server
 */

namespace Xspress3_ns
{
/*----- PROTECTED REGION ID(Xspress3::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
  
class AcqThread;

/*----- PROTECTED REGION END -----*/	//	Xspress3::Additional Class Declarations

class Xspress3 : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Xspress3::Data Members) ENABLED START -----*/

//	Add your own data members

	int m_nb_cards;
	int m_max_frames;
	string m_baseIPaddress;
	int m_basePort;
	string m_baseMACaddress;
	int m_nb_chans;
	bool m_create_module;
	string m_modname;
	int m_card_index;
	int m_debug;
	
	Tango::DevLong m_card;
	
        Tango::DevLong m_handle;

	Tango::DevLong flag_stop_acq;

	Tango::DevLong mca_length;
	
	Tango::DevLong debug_prints;

	enum DataSrc {
	  Normal = XSP3_CC_SEL_DATA(XSP3_CC_SEL_DATA_NORMAL),			///< Input data from this channels ADC
	  Alternate = XSP3_CC_SEL_DATA(XSP3_CC_SEL_DATA_ALTERNATE),	///< Input data from Alternate Channel
	  Multiplexer = XSP3_CC_SEL_DATA(XSP3_CC_SEL_DATA_MUX_DATA),	///< Input Data from All channel multiplexer
	  PlaybackStream0 = XSP3_CC_SEL_DATA(XSP3_CC_SEL_DATA_EXT0),	///< Input Data From Playback Stream 0
	  PlaybackStream1 = XSP3_CC_SEL_DATA(XSP3_CC_SEL_DATA_EXT1),	///< Input Data From Playback Stream 1
	};
	
	enum ClockSrc {
	  IntClk = XSP3_CLK_SRC_INT,		///< channel processing clock comes from fpga processor (testing only)
	  XtalClk = XSP3_CLK_SRC_XTAL,	///< adc and channel processing clock from crystal on the ADC board (normal single board or master operation).
	  ExtClk = XSP3_CLK_SRC_EXT,  	///< adc and channel processing clock from lemo clock connector on ADC board (slave boards)
	  Future = XSP3_CLK_SRC_FPGA,		///< not implemented, for future expansion
	  Mini = XSP3M_CLK_SRC_CDCM61004
	};
	
	enum ClockFlags {
	  Master = XSP3_CLK_FLAGS_MASTER,				///< this clock generate clocks for other boards in the system
	  NoDither =  XSP3_CLK_FLAGS_NO_DITHER,		///< disables dither within the ADC
	  Stage1Only = XSP3_CLK_FLAGS_STAGE1_ONLY,	///< performs stage of the lmk 03200 setup, does not enable zero delay mode
	  NoCheck = XSP3_CLK_FLAGS_NO_CHECK,			///< dont check for lock detect from lmk 03200
	  TpEnb = XSP3_CLK_FLAGS_TP_ENB,				///< enable test pattern from spartans
	  DisOverTemp = XSP3_CLK_FLAGS_DIS_OVER_TEMP,	///< Disable Over temperature protection on ADC Board
	  Shutdown0 = XSP3_CLK_FLAGS_SHUTDOWN0,		///< Shutdown ADC channel 0
	  Shutdown123 =  XSP3_CLK_FLAGS_SHUTDOWN123,	///< Shutdown ADC channels 123
	  Shutdown4 =  XSP3_CLK_FLAGS_SHUTDOWN4,		///< Shutdown ADC channel 4 (middle (unused?))
	  Shutdown5678 = XSP3_CLK_FLAGS_SHUTDOWN5678	///< Shutdown ADC channel5678 last 4
	};
	
	enum ItfgTriggerMode
	{
	  Burst,				///<  Run burst of back to back frames.
	  SoftwarePause,		///< Pause before every frame and wait for rising edge on CountEnb bit.
	  HardwarePause,		///< Pause before every frame and wait for rising edge on TTL_IN(1).
	  SoftwareOnlyFirst,	///< Pause before first frame and wait for rising edge on CountEnb bit.
	  HardwareOnlyFirst	///< Pause before first frame and wait for rising edge on TTL_IN(1).
	};
	
	enum ItfgGapMode {
	  Gap25ns,	///< Minimal gap between frames. Care when using multiple boxes. Short cables and/or termination. 0 debounce time.
	  Gap200ns,	///< 200ns gap between frames. Use short cables and short (approx 10 cycle debounce time) when using multiple boxes.
	  Gap500ns,	///< 500ns gap between frames. Use approx 30 cycle debounce time when using multiple boxes.
	  Gap1us		///< 1us gap between frames. Allows long cables and  approx 70 cycle debounce time when using multiple boxes.
	};
	
	void setTiming(int time_src, int first_frame, int alt_ttl_mode, int debounce, bool loop_io, bool f0_invert, bool veto_invert);
	
	void setTimingMode();
	
	void setItfgTiming(int nframes, int triggerMode, int gapMode);
	
	enum TrigMode {
	  IntTrig, ExtGate,
	};

	
	 friend class AcqThread;
	 AcqThread *acq_thread;
	 omni_mutex                      mutex;
	
/*----- PROTECTED REGION END -----*/	//	Xspress3::Data Members

//	Device property data members
public:
	//	NbCards:	Number of Xspress3 boxes
	Tango::DevLong	nbCards;
	//	MaxFrames:	
	Tango::DevLong	maxFrames;
	//	BaseIPAddress:	
	string	baseIPAddress;
	//	BasePort:	
	Tango::DevLong	basePort;
	//	BaseMACAddress:	
	string	baseMACAddress;
	//	NbChannels:	4, 6 or 8, depending on the firmware
	Tango::DevLong	nbChannels;
	//	CreateScopeModule:	
	Tango::DevBoolean	createScopeModule;
	//	ScopeModuleName:	
	string	scopeModuleName;
	//	Debug:	0 is off, 1 is on, 2 is verbose cardIndex = 0 (for a 1 xspress system)
	Tango::DevLong	debug;
	//	CardIndex:	0 for a 1 xspress system
	Tango::DevLong	cardIndex;
	//	ConfigFileDirectory:	Directory with configuration file. If None, not configuration 
	//  from file will be applied.
	string	configFileDirectory;
	//	InputImpedance:	0 -> High Impedance, 1 -> 50 Ohms (both TTL inputs)
	Tango::DevLong	inputImpedance;

//	Attribute data members
public:
	Tango::DevDouble	*attr_ExposureTime_read;
	Tango::DevLong	*attr_NbFrames_read;
	Tango::DevLong	*attr_TriggerMode_read;
	Tango::DevString	*attr_FileDir_read;
	Tango::DevLong	*attr_LastFrame_read;
	Tango::DevString	*attr_FilePrefix_read;
	Tango::DevLong	*attr_MCALength_read;
	Tango::DevLong	*attr_FramesPerFile_read;
	Tango::DevLong	*attr_RunMode_read;
	Tango::DevLong	*attr_DataCh1_read;
	Tango::DevLong	*attr_DataCh2_read;
	Tango::DevLong	*attr_DataCh3_read;
	Tango::DevLong	*attr_DataCh4_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Xspress3(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Xspress3(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Xspress3(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~Xspress3() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Xspress3::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Xspress3::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute ExposureTime related methods
 *	Description: Exposure time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ExposureTime(Tango::Attribute &attr);
	virtual void write_ExposureTime(Tango::WAttribute &attr);
	virtual bool is_ExposureTime_allowed(Tango::AttReqType type);
/**
 *	Attribute NbFrames related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_NbFrames(Tango::Attribute &attr);
	virtual void write_NbFrames(Tango::WAttribute &attr);
	virtual bool is_NbFrames_allowed(Tango::AttReqType type);
/**
 *	Attribute TriggerMode related methods
 *	Description: 0 -> internal trigger, 1 -> external gate
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_TriggerMode(Tango::Attribute &attr);
	virtual void write_TriggerMode(Tango::WAttribute &attr);
	virtual bool is_TriggerMode_allowed(Tango::AttReqType type);
/**
 *	Attribute FileDir related methods
 *	Description: Path to the dector image files.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_FileDir(Tango::Attribute &attr);
	virtual void write_FileDir(Tango::WAttribute &attr);
	virtual bool is_FileDir_allowed(Tango::AttReqType type);
/**
 *	Attribute LastFrame related methods
 *	Description: Last acquired frame
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_LastFrame(Tango::Attribute &attr);
	virtual bool is_LastFrame_allowed(Tango::AttReqType type);
/**
 *	Attribute FilePrefix related methods
 *	Description: Name of the file to store the data. The end .nxs will be automatically added.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_FilePrefix(Tango::Attribute &attr);
	virtual void write_FilePrefix(Tango::WAttribute &attr);
	virtual bool is_FilePrefix_allowed(Tango::AttReqType type);
/**
 *	Attribute MCALength related methods
 *	Description: Length of the MCA data to store. If 0 the maximum mca length will be saved.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_MCALength(Tango::Attribute &attr);
	virtual void write_MCALength(Tango::WAttribute &attr);
	virtual bool is_MCALength_allowed(Tango::AttReqType type);
/**
 *	Attribute FramesPerFile related methods
 *	Description: Number of frames to save in each file. If 0 all frames will be in the same file.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_FramesPerFile(Tango::Attribute &attr);
	virtual void write_FramesPerFile(Tango::WAttribute &attr);
	virtual bool is_FramesPerFile_allowed(Tango::AttReqType type);
/**
 *	Attribute RunMode related methods
 *	Description: RunMode: playback, scope, scalers, hist, diag_hist, circular_buffer
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 6
 */
	virtual void read_RunMode(Tango::Attribute &attr);
	virtual void write_RunMode(Tango::WAttribute &attr);
	virtual bool is_RunMode_allowed(Tango::AttReqType type);
/**
 *	Attribute DataCh1 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 4096
 */
	virtual void read_DataCh1(Tango::Attribute &attr);
	virtual bool is_DataCh1_allowed(Tango::AttReqType type);
/**
 *	Attribute DataCh2 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 4096
 */
	virtual void read_DataCh2(Tango::Attribute &attr);
	virtual bool is_DataCh2_allowed(Tango::AttReqType type);
/**
 *	Attribute DataCh3 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 4096
 */
	virtual void read_DataCh3(Tango::Attribute &attr);
	virtual bool is_DataCh3_allowed(Tango::AttReqType type);
/**
 *	Attribute DataCh4 related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Spectrum max = 4096
 */
	virtual void read_DataCh4(Tango::Attribute &attr);
	virtual bool is_DataCh4_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Xspress3::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command StartAcquisition related method
	 *	Description: Start Acquisition
	 *
	 */
	virtual void start_acquisition();
	virtual bool is_StartAcquisition_allowed(const CORBA::Any &any);
	/**
	 *	Command StopAcquisition related method
	 *	Description: Stop acquisition
	 *
	 */
	virtual void stop_acquisition();
	virtual bool is_StopAcquisition_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Xspress3::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Xspress3::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	Xspress3::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Xspress3::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Xspress3::Additional Classes Definitions

}	//	End of namespace

#endif   //	Xspress3_H
